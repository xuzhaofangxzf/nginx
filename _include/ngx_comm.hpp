#ifndef __NGX_COMM_H__
#define __NGX_COMM_H__
//宏定义

//每个包的最大长度【包头+包体】不超过这个数字，为了留出一些空间，实际上编码是，包头+包体长度必须不大于 这个值-1000【29000】
#define _PKG_MAX_LENGTH 30000

//通信,收包状态定义
#define _PKG_HD_INIT    0 //初始状态,准备接收数据包头
#define _PKG_HD_RECVING 1 //接收包头中,包头不完整,继续接收中
#define _PKG_BD_INIT    2 //包头刚好接收完整,准备接收包体
#define _PKG_BD_RECVING 3 //接收包体中,包体不完整,继续接收中,处理后直接返回到_PKG_HD_INIT状态

//因为我要先收包头，我希望定义一个固定大小的数组专门用来收包头，这个数字大小一定要 >sizeof(COMM_PKG_HEADER) ,所以我这里定义为20绰绰有余；
//如果日后COMM_PKG_HEADER大小变动，这个数字也要做出调整以满足 >sizeof(COMM_PKG_HEADER) 的要求
#define _DATA_BUFSIZZE 20 

//结构定义

#pragma pack(1) //1字节对齐

//一些和网络通相关的结构
//包头结构
typedef struct _COMM_PKG_HEADER
{
    unsigned short pkgLen;//报文总长度【包头+包体】--2字节，2字节可以表示的最大数字为6万多，我们定义_PKG_MAX_LENGTH 30000，所以用pkgLen足够保存下
                        //包头中记录着整个包【包头—+包体】的长度
    unsigned short mgsCode; //消息类型代码--2字节,用于区别每个不同的命令
    int crc32; //CRC32校验--4字节,为了防止收发数据中出现收到内容和发送内容不一致的情况,引入这个字段做一个基本的校验
}COMM_PKG_HEADER,*LPCOMM_PKG_HEADER;


/*
    关于字节对齐的一些理解:
    struct A
    {
        char c;
        int i;
    }
    struct A a;
    假如a存放在内存中的起始地址是0x00,那么其成员变量c的起始地址为0x00,成员变量i的起始地址为0x01,变量a一共占用了5个字节.
    当CPU 要对成员c进行访问的时候,只需要一个读周期即可.
    (32位架构,每个总线周期从偶地址开始访问32内存数据,内存数据以字节为单位存放,如果一个32位的数据没有存放在4字节整除的内存地址处,那么处理器就需要2个总线周期对其进行访问)
    而若要对成员变量i进行访问,首先CPU用了一个读周期,从0x00处读取了4个字节,然后将0x01-0x03的三个字节暂存,
    接着又花费了一个周期读取了从0x04-0x07的4字节数据,将0x04这个字节与刚才暂存的3个自己进行拼接从而读取到i的值.CPU花费了整整两个读周期.如果i的起始地址放到了0x04处,那么读取其所花费的周期就变成了1,
    显然引入字节对齐可以避免读取效率的下降,但同时也浪费了3个字节的空间.
*/
//一些和网络通讯相关的结构放这里

#pragma pack() //恢复默认字节对齐方式



#endif